{"name":"Parse-where","body":"# parse-where\r\n\r\nUse functions to create a \"where\" object that can be used for parse.com.\r\n\r\nStarting with a SQL string:\r\n\r\n```SQL\r\nWHERE key1 <= value AND key1 > value2 AND key3=value3\r\n```\r\n\r\ngets parsed into (using `fromSQL`):\r\n\r\n```javascript\r\nwhere(\"key1\").lte(\"value\").and(\"key1\").gt(\"value2\").and(\"key3\").equals(\"value3\")\r\n```\r\n\r\nwhich gets converted to (using `parseWhereQuery` or evil `eval`):\r\n\r\n\t?where={\"key1\":{\"$lte\":value,\"$gt\":value2},\"key3\":value3}\r\n\r\nfor passing to $.parse.get\r\n\r\n## Requirements\r\n\r\n* Client Side: jQuery and jQuery-Parse    \r\n* _~ OR ~_ Server Side: NodeJS\r\n\r\n## Other Operators\r\n\r\n<pre>\r\n$op \tName\r\n=== \t====\r\n:   \tEqual To\r\n$lt \tLess Than\r\n$lte\tLess Than Or Equal To\r\n$gt \tGreater Than\r\n$gte\tGreater Than Or Equal To\r\n$ne \tNot Equal To\r\n$in \tContained In\r\n$nin\tNot Contained in\r\n$exists\tA value is set for the key\r\n$regex\tRegular Expressions\r\n</pre>\r\n\r\nFor functional notation, remove the '$'. \r\n\r\nSQL: \"WHERE x > 100\" \r\n\r\n* becomes **Where Function Chain**: where('x').gt(100) \r\n* becomes **WhereClause Object**: {\"x\":{\"$gt\":100}} \r\n* becomes **Query String**: '?where={\"x\":{\"$gt\":100}}'\r\n\r\n## Query Constraints\r\n\r\nAdditional query constraints that can be given at the end of the the Where Clause: `limit skip order include count`.\r\n\r\nAlso, `desc` can be given after `order`. So `order('x').desc()` becomes '&limit=-x' appended to the Query String.\r\nNote this must be appended to the Query String (1st argument of $.parse.get) rather sent as an object (2nd argument of $.parse.get)\r\n\r\n### Usage:\r\n\r\n```javascript\r\n\r\nwhereQ=where(\"score\").exists();\r\nwhereQ.toString(1) === '{\"score\":{\"$exists\":true}}';\r\nwhereQ.toString() === '?where={\"score\":{\"$exists\":true}}';\r\n$.parse.get('GameScore', whereQ, callback);  // ok\r\n$.parse.get('GameScore' + whereQ, callback); // better\r\n    \r\nwhereLimit=where(\"score\").exists().order(\"score\").desc().limit(10).count();\r\n$.parse.get('GameScore', whereLimit, callback);  // NOT OK!\r\n$.parse.get('GameScore' + whereLimit, callback);  // ok\r\n\r\n```\r\n\r\n## Summary\r\n\r\nUse functions to create \"where\" objects to send to the parse.com server.\r\nCan also convert to and from a subset of SQL. Sorry, no \"_OR_\" or \"_GROUP BY_\"!\r\n\r\n## NOTE\r\n\r\nThis [repo](https://github.com/josher19/parse-where/) was created **before** parse.com came out with their new \r\n[Javascript Guide](https://www.parse.com/docs/js_guide).\r\n\r\nDefinitely worth looking at, especially if you are a Backbone.js fan or \r\nwant to do User Signup & Login, though there are currently \r\nsome [typos and errors](https://github.com/josher19/parse-where/wiki/Parse.com-Javascript-Guide) in the sample code.\r\n\r\n","tagline":"Use functions to create a \"where\" object that can be used for parse.com","google":"UA-26487682-2","note":"Don't delete this file! It's used internally to help with page regeneration."}